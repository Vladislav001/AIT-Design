"use strict";

var _toArray = function (arr) {
  return Array.isArray(arr) ? arr : Array.from(arr);
};

var pathToRegexp = require("path-to-regexp");
var qs = require("qs");

var map = function (getMatches, parent) {
  var routes = [];
  getMatches(function (path, handler, getChildMatches) {
    path = inheritPath(path, parent && parent.path);
    var route = { path: path, handler: handler, parent: parent };
    route.matcher = makePathMatcher(path);
    route.children = getChildMatches ? map(getChildMatches, route) : [];
    routes.push(route);
  });
  return routes;
};

var match = function (path, routes) {
  var _ref = parsePath(path);

  var pathname = _ref.pathname;
  var query = _ref.query;
  var route = matchDeepestRoute(routes, pathname);
  return route ? {
    path: path,
    params: parseParams(route, pathname),
    query: parseQuery(query),
    handlers: getHandlers(route),
    route: route
  } : null;
};

module.exports = { match: match, map: map };

////////////////////////////////////////////////////////////////////////////////

var inheritPath = function (childPath, parentPath) {
  return (parentPath && childPath.charAt(0) !== "/") ? "" + parentPath + "/" + childPath : childPath;
};

var makePathMatcher = function (path) {
  var keys = [];
  var regexp = pathToRegexp(path, keys);
  return { keys: keys, regexp: regexp };
};

var parseQuery = function (query) {
  return qs.parse(query) || {};
};

var parsePath = function (path) {
  var _ref2 = path.split("?");

  var _ref3 = _toArray(_ref2);

  var pathname = _ref3[0];
  var query = _ref3[1];
  return { pathname: pathname, query: query };
};

var parseParams = function (route, path) {
  var keys = route.matcher.keys;
  var regexp = route.matcher.regexp;
  return regexp.exec(path).slice(1).reduce(function (params, value, index) {
    params[keys[index].name] = value;
    return params;
  }, {});
};

var matchDeepestRoute = function (routes, path) {
  return routes.reduce(function (siblingMatch, route) {
    if (siblingMatch) return siblingMatch;
    var childMatch = matchDeepestRoute(route.children, path);
    if (childMatch) return childMatch;
    var selfMatch = route.matcher.regexp.test(path);
    if (selfMatch) return route;
  }, null);
};

var getHandlers = function (route) {
  var handlers = [];
  while (route) {
    handlers.unshift(route.handler);
    route = route.parent;
  }
  return handlers;
};

